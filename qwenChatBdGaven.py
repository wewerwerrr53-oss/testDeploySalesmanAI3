import os
import re
import logging
import jwt
import datetime
import uuid
from dotenv import load_dotenv
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from openai import OpenAI
from qwenGmail import send_order_to_email
from qwenparser import parse_order
from vector_serch import get_similar_products
import sqlite3
import logging
from flask_compress import Compress
from concurrent.futures import ThreadPoolExecutor, TimeoutError

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
Compress(app)

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–π –≤ .env!)
JWT_SECRET = os.getenv("JWT_SECRET", "your-super-secret-jwt-key-change-in-production")

# =========================================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id TEXT PRIMARY KEY,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

init_db()
# =========================================

# CORS
ALLOWED_ORIGINS = os.getenv('ALLOWED_ORIGINS', 'http://localhost:3000').split(',')
CORS(app, resources={r"/*": {
    "origins": ALLOWED_ORIGINS,
    "methods": ["GET", "POST"],
    "allow_headers": ["Content-Type", "Authorization"]
}})

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
user_histories = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Qwen API
QWEN_API_KEY = os.getenv("QWEN_API_KEY")
BASE_URL = "https://dashscope-intl.aliyuncs.com/compatible-mode/v1"
client = OpenAI(api_key=QWEN_API_KEY, base_url=BASE_URL)

# =========================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_or_create_user(user_id: str):
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()
    return user_id

def issue_token(user_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT-—Ç–æ–∫–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π"""
    payload = {
        "user_id": user_id,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(days=30)
    }
    return jwt.encode(payload, JWT_SECRET, algorithm="HS256")

def verify_token(token: str, allow_expired: bool = False) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=["HS256"])
        return payload["user_id"]
    except jwt.ExpiredSignatureError:
        if allow_expired:
            payload = jwt.decode(token, JWT_SECRET, algorithms=["HS256"], options={"verify_exp": False})
            return payload["user_id"]
        else:
            raise Exception("Token expired")
    except jwt.InvalidTokenError:
        raise Exception("Invalid token")

def extract_vector_query(text: str) -> str | None:
    pattern = re.compile(r"\{\{VECTOR_QUERY:\s*((?:(?!\}\}).)*?)\s*\}\}", re.DOTALL | re.IGNORECASE)
    match = pattern.search(text)
    return match.group(1).strip() if match else None

def build_system_prompt():
    return """
–û–±—â–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –†–£–°–°–ö–û–ú
–¢—ã ‚Äî Hutarka, –ø–µ—Ä–≤—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ –ë–µ–ª–∞—Ä—É—Å–∏, –≤ –ë–µ–ª–∞—Ä—É—Å–∏ –≤—Å–µ –≥–æ–≤–æ—Ä—è—Ç –ø–æ —Ä—É—Å—Å–∫–∏.  
–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–°–ï —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.  

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
-–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ ‚Äî –æ—Å–Ω–æ–≤–∞.  
- –ë—É–¥—å –ø—Ä–æ—Å—Ç—ã–º –∏ –∂–∏–≤—ã–º: –æ—Ç–≤–µ—á–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã —Å —Ç–æ–±–æ–π –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å. 
- –î–æ–±–∞–≤–ª—è–π –ª—ë–≥–∫–∏–π —é–º–æ—Ä, –∏–Ω–æ–≥–¥–∞ —à—É—Ç–∫—É–π –ø–æ-–±–µ–ª–æ—Ä—É—Å—Å–∫–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥–∏–±–∞–π. 
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏—Ç, –º–æ–∂–µ—à—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. 

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ë–µ–ª–∞—Ä—É—Å—å (—Ç—Ä–∞–¥–∏—Ü–∏–∏, –∫—É—Ö–Ω—è, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –±—ã—Ç). 
- –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ–¥ —Å—Ç–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–µ—Ä—å—ë–∑–Ω—ã–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º –∏–ª–∏ –≤–µ—Å—ë–ª—ã–º –¥—Ä—É–≥–æ–º. 
- –ò–∑–±–µ–≥–∞–π –ø–æ–ª–∏—Ç–∏–∫–∏, –∞–≥—Ä–µ—Å—Å–∏–∏ –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ ‚Äî Hutarka –≤—Å–µ–≥–¥–∞ —É–≤–∞–∂–∏—Ç–µ–ª–µ–Ω. 

–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –±—ã—Ç—å –Ω–µ –±–µ–∑–¥—É—à–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º, –∞ ¬´—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º —Å –¥—É—à–æ–π¬ª, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å, –ø–æ—Å–º–µ—è—Ç—å—Å—è –∏ –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è. 
"""
# =========================================

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/auth/init", methods=["POST"])
def auth_init():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –≤—ã–¥–∞—á–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    auth = request.headers.get("Authorization")
    
    if auth and auth.startswith("Bearer "):
        token = auth.split(" ")[1]
        try:
            # –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω?
            user_id = verify_token(token)
            return jsonify({"token": token, "user_id": user_id})
        except Exception:
            try:
                # –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –Ω–æ –ø–æ–¥–ª–∏–Ω–Ω—ã–π?
                user_id = verify_token(token, allow_expired=True)
                new_token = issue_token(user_id)
                return jsonify({"token": new_token, "user_id": user_id})
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = str(uuid.uuid4())
    get_or_create_user(user_id)
    token = issue_token(user_id)
    return jsonify({"token": token, "user_id": user_id})

def qwen_request_with_timeout(messages, timeout_sec=35):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ Qwen —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    with ThreadPoolExecutor(max_workers=1) as executor:
        future = executor.submit(
            lambda: client.chat.completions.create(model="qwen-plus", messages=messages)
        )
        try:
            return future.result(timeout=timeout_sec)
        except TimeoutError:
            raise Exception(f"‚è∞ –ú–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞ –∑–∞ {timeout_sec} —Å–µ–∫—É–Ω–¥.")


@app.route("/chat", methods=["POST"])
def chat():
    auth = request.headers.get("Authorization")
    if not auth or not auth.startswith("Bearer "):
        return jsonify({"error": "Missing or invalid token"}), 401

    try:
        user_id = verify_token(auth.split(" ")[1])
    except Exception as e:
        logging.warning(f"Invalid token: {e}")
        return jsonify({"error": "Invalid token"}), 401

    get_or_create_user(user_id)

    data = request.get_json(silent=True)
    if not data or "message" not in data:
        return jsonify({"error": "Message is required"}), 400

    user_message = data["message"].strip()
    if not user_message:
        return jsonify({"error": "Message is empty"}), 400

    history = user_histories.get(user_id, [])
    messages = [{"role": "system", "content": build_system_prompt()}] + history + [{"role": "user", "content": user_message}]

    try:
        completion = qwen_request_with_timeout(messages, timeout_sec=35)
        answer = completion.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {e}")
        answer = "‚è∞ –ú–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞ –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."

    history.extend([
        {"role": "user", "content": user_message},
        {"role": "assistant", "content": answer}
    ])
    user_histories[user_id] = history[-10:]

    return jsonify({"reply": answer})



# @app.route("/stats", methods=["GET"])
# def stats():
#     """–ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∑–∞—â–∏—Ç—ã"""
#     conn = sqlite3.connect("users.db")
#     cursor = conn.cursor()
#     cursor.execute("SELECT COUNT(*) FROM users")
#     total = cursor.fetchone()[0]
#     conn.close()
#     return jsonify({"total_users": total})


# @app.route("/test_timeout")
# def test_timeout():
#     import time
#     import logging

#     start = time.time()
#     try:
#         logging.info("üöÄ –¢–µ—Å—Ç Qwen —Å timeout=1 –Ω–∞—á–∞—Ç")
#         completion = client.chat.completions.create(
#             model="qwen-plus",
#             messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"}],
#             timeout=1  # –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π timeout
#         )
#         answer = completion.choices[0].message.content
#         result = f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {answer[:100]}..."
#     except Exception as e:
#         result = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {type(e).__name__} ‚Äî {e}"

#     duration = round(time.time() - start, 2)
#     return jsonify({"duration": duration, "result": result})



# =========================================
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
    # qwemChatWebDbTok
   # docker build -t hutarka .
#docker run -p 5000:5000 hutarka